class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None
        def append(self, data):  
        new_node = Node(data)
        if not self.head:
            self.head = new_node
            return
        temp = self.head
        while temp.next:
            temp = temp.next
        temp.next = new_node
        def prepend(self, data):  
        new_node = Node(data)
        new_node.next = self.head
        self.head = new_node

    def insert_at_position(self, data, pos):
        if pos <= 0:
            self.prepend(data)
            return
        new_node = Node(data)
        temp = self.head
        for _ in range(pos - 1):
            if not temp.next:
                break
            temp = temp.next
        new_node.next = temp.next
        temp.next = new_node

    def delete(self, key):
        temp = self.head
        if temp and temp.data == key:
            self.head = temp.next
            return
        prev = None
        while temp and temp.data != key:
            prev = temp
            temp = temp.next
        if temp:
            prev.next = temp.next

    def display(self):
        temp = self.head
        while temp:
            print(temp.data, end=" -> ")
            temp = temp.next
        print("None")

    def search(self, key):
        temp = self.head
        pos = 0
        while temp:
            if temp.data == key:
                return pos
            pos += 1
            temp = temp.next
        return -1
ll = LinkedList()
for item in ["Chocolate", "Cake", "Biscuit", "Brownie", "Ice cream"]:
    ll.append(item)

ll.display()
ll.prepend("Coffee")
ll.append("Chicken Biryani")
ll.insert_at_position("Burger", 3)
ll.display()

ll.delete("Coffee")
ll.delete("Chicken Biryani")
ll.delete("Brownie")

print("After deletion:")
ll.display()

pos = ll.search("Ice cream")
print(f"Ice cream found at position: {pos}")
